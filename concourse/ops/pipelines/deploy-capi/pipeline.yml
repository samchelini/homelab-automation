resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
    tag: latest

resources:
  - name: terraform
    type: terraform
    source:
      backend_type: s3
      backend_config:
        access_key: ((terraform.s3_access_key))
        secret_key: ((terraform.s3_secret_key))
        bucket: ((terraform.oci_bucket))
        region: ((terraform.oci_region))
        skip_region_validation: true
        skip_credentials_validation: true
        skip_requesting_account_id: true
        use_path_style: true
        skip_s3_checksum: true
        skip_metadata_api_check: true
        key: capi.tfstate
        workspace_key_prefix: terraform
        endpoints:
          s3: https://((terraform.oci_namespace)).compat.objectstorage.((terraform.oci_region)).oraclecloud.com
      env:
        TF_VAR_vsphere_user: ((terraform.vsphere_user))
        TF_VAR_vsphere_password: ((terraform.vsphere_password))
        TF_VAR_vsphere_server: ((terraform.vsphere_server))
        #TF_LOG: "debug"

  - name: homelab-automation
    type: git
    source:
      uri: https://github.com/samchelini/homelab-automation.git
      branch: main

jobs:
- name: create-talos-vms
  plan:
  - get: homelab-automation
  - put: terraform
    inputs:
    - homelab-automation
    params:
      env_name: capi
      terraform_source: homelab-automation/concourse/ops/pipelines/deploy-capi/config/terraform
      vars:
        datacenter_name: ((terraform.vsphere_datacenter_name))
        datastore_cluster_name: ((terraform.vsphere_datastore_cluster_name))
        cluster_name: ((terraform.vsphere_cluster_name))
        resource_pool_name: ((terraform.vsphere_resource_pool_name))
        network_name: ((terraform.vsphere_network_name))
        folder_name: ((terraform.vsphere_folder_name))
        vm_domain: ((talos.internal_domain))
        trustdinfo_token: ((talos.trustdinfo_token))
        os_crt: ((talos.os_crt))
        os_key: ((talos.os_key))
        talos_cluster_name: ((talos.cluster_name))
        cluster_id: ((talos.cluster_id))
        cluster_secret: ((talos.cluster_secret))
        bootstrap_token: ((talos.bootstrap_token))
        secretboxencryptionsecret: ((talos.secretboxencryptionsecret))
        k8s_crt: ((talos.k8s_crt))
        k8s_key: ((talos.k8s_key))
        k8saggregator_crt: ((talos.k8saggregator_crt))
        k8saggregator_key: ((talos.k8saggregator_key))
        k8sserviceaccount_key: ((talos.k8sserviceaccount_key))
        etcd_crt: ((talos.etcd_crt))
        etcd_key: ((talos.etcd_key))

- name: bootstrap-talos
  plan:
  - get: terraform
    passed: [create-talos-vms]
    trigger: true

  - task: get-talosconfig
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: alpine
          tag: latest
      outputs:
      - name: talos
      run:
        path: sh
        args:
        - -c
        - echo "((talos.talosconfig))" > talos/talosconfig

  - task: run-talosctl-bootstrap
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: schelini/talosctl
          tag: v1.10.5
      inputs:
      - name: talos
      run:
        path: /bin/sh
        args:
        - -cex
        - |
          export TALOSCONFIG=talos/talosconfig
          BOOTSTRAPPED=$(talosctl get service --output json | jq -r 'select(.metadata.id=="etcd") | .metadata.id' | wc -l)
          if [ "${BOOTSTRAPPED}" -eq 0 ]; then
            BOOTSTRAP_NODE=$(talosctl config info --output json | jq -r .nodes[0])
            talosctl bootstrap --nodes ${BOOTSTRAP_NODE}
          fi

  - task: wait-until-ready
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: schelini/talosctl
          tag: v1.10.5
      inputs:
      - name: talos
      run:
        path: /bin/sh
        args:
        - -cex
        - |
          export TALOSCONFIG=talos/talosconfig
          MACHINESTATUS=$(talosctl get machinestatus --output json | jq -r '.spec | select(.stage == "booting" or .status.ready == false)')
          i=0
          while [ $i -ne 600 ]
          do
            if [ -z "${MACHINESTATUS}" ]; then
              exit 0
            fi
            MACHINESTATUS=$(talosctl get machinestatus --output json | jq -r '.spec | select(.stage == "booting" or .status.ready == false)')
            i=$(($i+1))
            sleep 1
          done
          exit 1
