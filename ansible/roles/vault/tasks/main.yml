- name: install vault
  block:
    - name: vault | get hashicorp keyring
      ansible.builtin.get_url:
        url: https://apt.releases.hashicorp.com/gpg
        dest: /usr/share/keyrings/hashicorp-archive-keyring.asc
        force: true

    - name: vault | add hashicorp repo
      ansible.builtin.apt_repository:
        repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/hashicorp-archive-keyring.asc] https://apt.releases.hashicorp.com {{ ansible_distribution_release }} main"
        state: present

    - name: vault | install
      ansible.builtin.apt:
        update_cache: true
        name: vault
        state: latest

    - name: vault | start and enable
      ansible.builtin.systemd_service:
        name: vault
        state: started
        enabled: true
  become: true

- name: install python3-hvac
  ansible.builtin.apt:
    name: python3-hvac
    state: latest
  become: true

- name: import letsencrypt role
  ansible.builtin.import_role:
    name: letsencrypt

- name: install configuration template
  ansible.builtin.template:
    src: "vault.hcl.j2"
    dest: /etc/vault.d/vault.hcl
  register: config_template
  become: true

- name: restart vault
  ansible.builtin.systemd_service:
    state: restarted
    name: vault
  when: config_template is changed
  become: true

- name: get vault status
  ansible.builtin.command: vault status
  register: vault_status
  changed_when: false
  failed_when: vault_status.rc != 2 and vault_status.rc != 0

- name: initialize vault
  block:
    - name: initialize vault | vault operator init
      ansible.builtin.command: vault operator init
      register: vault_init

    - name: initialize vault | save keys
      ansible.builtin.copy:
        content: '{{ vault_init.stdout | from_json }}'
        dest: '{{ role_path }}/files/vault-keys.json'
        owner: ansible
        group: ansible
        mode: "600"
      delegate_to: localhost
  when: not vault_status.stdout | from_json | json_query("initialized")

- name: get vault status
  ansible.builtin.command: vault status
  register: vault_status
  changed_when: false
  failed_when: vault_status.rc != 2 and vault_status.rc != 0

- name: unseal vault
  block:
    - name: unseal vault | get keys and unseal
      ansible.builtin.command: vault operator unseal {{ item }}
      with_items: "{{ [0,1,2] | map('extract', lookup('ansible.builtin.file', 'vault-keys.json') | from_json | json_query('unseal_keys_hex')) | list }}"
      no_log: true

    - name: unseal vault | check sealed status
      ansible.builtin.command: vault status
      register: vault_status
      failed_when: >
        vault_status.rc != 0 or
        vault_status.stdout | from_json | json_query("sealed")
  when: vault_status.stdout | from_json | json_query("sealed")

- name: auth
  block:
    - name: auth | get auth list
      ansible.builtin.command: vault auth list
      changed_when: false
      register: vault_auth

    - name: auth | enable ldap
      ansible.builtin.command: vault auth enable ldap
      when: '"ldap/" not in vault_auth.stdout | from_json | list'

    - name: auth | enable approle
      ansible.builtin.command: vault auth enable approle
      when: '"approle/" not in vault_auth.stdout | from_json | list'

    - name: auth | configure ldap
      community.hashi_vault.vault_write:
        path: auth/ldap/config
        data:
          url: ldaps://ldap.{{ domain_name }}
          binddn: cn=readonly,ou=Users,{{ dc }}
          bindpass: "{{ readonly_password }}"
          userdn: ou=users,{{ dc }}
          userattr: mail
          userfilter: (&(objectClass=inetOrgPerson)(mail={{ '{{' }}.Username{{ '}}' }}))
          groupdn: ou=groups,{{ dc }}

    - name: auth | configure concourse approle
      community.hashi_vault.vault_write:
        path: auth/approle/role/concourse
        data:
          policies: concourse
          period: 1h

    - name: auth | get concourse role-id
      community.hashi_vault.vault_read:
        path: auth/approle/role/concourse/role-id
      register: concourse_role_id

    - name: auth | get concourse secret-id
      community.hashi_vault.vault_write:
        path: auth/approle/role/concourse/secret-id
      register: concourse_secret_id
  environment:
    VAULT_TOKEN: "{{ lookup('ansible.builtin.file', 'vault-keys.json') | from_json | json_query('root_token') }}"

- name: store concourse approle credentials
  ansible.builtin.copy:
    content: '{{ approle_creds | to_json }}'
    dest: '{{ inventory_dir }}/roles/concourse/files/approle-creds.json'
    owner: ansible
    group: ansible
    mode: "600"
  vars:
    approle_creds:
      role_id: "{{ concourse_role_id.data.data.role_id }}"
      secret_id: "{{ concourse_secret_id.data.data.secret_id }}"
  delegate_to: localhost

- name: secrets
  block:
    - name: secrets | get secret engines
      ansible.builtin.command: vault secrets list
      changed_when: false
      register: vault_secrets

    - name: secrets | enable
      ansible.builtin.command: vault secrets enable -path=secrets -version=2 kv
      when: '"secrets/" not in vault_secrets.stdout | from_json | list'
  environment:
    VAULT_TOKEN: "{{ lookup('ansible.builtin.file', 'vault-keys.json') | from_json | json_query('root_token') }}"

- name: policy
  block:
    - name: policy | get policies
      community.hashi_vault.vault_read:
        path: sys/policy
      register: vault_policies

    - name: policy | copy ops policy
      ansible.builtin.copy:
        src: vault-policy-ops.hcl
        dest: /opt/vault/policies/
        owner: vault
        group: vault
      register: ops_policy
      become: true

    - name: policy | copy concourse policy
      ansible.builtin.copy:
        src: vault-policy-concourse.hcl
        dest: /opt/vault/policies/
        owner: vault
        group: vault
      register: concourse_policy
      become: true

    - name: policy | create ops policy
      ansible.builtin.command: vault policy write ops /opt/vault/policies/vault-policy-ops.hcl
      when: '"ops" not in vault_policies.data.policies'

    - name: policy | create concourse policy
      ansible.builtin.command: vault policy write concourse /opt/vault/policies/vault-policy-concourse.hcl
      when: '"concourse" not in vault_policies.data.policies'

    - name: policy | update ops policy
      ansible.builtin.command: vault write sys/policy/ops policy=@/opt/vault/policies/vault-policy-ops.hcl
      when: ops_policy is changed

    - name: policy | update concourse policy
      ansible.builtin.command: vault write sys/policy/concourse policy=@/opt/vault/policies/vault-policy-concourse.hcl
      when: concourse_policy is changed

    - name: policy | configure ops group
      community.hashi_vault.vault_write:
        path: auth/ldap/groups/ops
        data:
          policies: ops

    - name: policy | configure concourse group
      community.hashi_vault.vault_write:
        path: auth/ldap/groups/concourse
        data:
          policies: concourse
  environment:
    VAULT_TOKEN: "{{ lookup('ansible.builtin.file', 'vault-keys.json') | from_json | json_query('root_token') }}"
