- name: generate ansible ssh keypair
  community.crypto.openssh_keypair:
    path: "roles/bootstrap/files/ansible_ed25519"
    comment: "ansible"
    type: "ed25519"
  delegate_to: localhost

- name: create vm from template 
  community.vmware.vmware_guest:
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: false
    datacenter: '{{ vcenter_datacenter }}'
    cluster: '{{ vcenter_cluster }}'
    resource_pool: '{{ vcenter_resource_pool }}'
    folder: '/{{ vcenter_datacenter }}/vm/ansible_vms'
    name: '{{ vm_name }}'
    template: '{{ vm_template }}'
    disk:
    - size_gb: 32
      type: thin
      autoselect_datastore: true
    hardware:
      memory_mb: 2048
      num_cpus: 2
  delegate_to: localhost
  register: vm_info

- name: set vm network
  community.vmware.vmware_guest_network:
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: false
    datacenter: '{{ vcenter_datacenter }}'
    cluster: '{{ vcenter_cluster }}'
    folder: '/{{ vcenter_datacenter }}/vm/ansible_vms'
    name: '{{ vm_name }}'
    network_name: '{{ vm_network }}'
  delegate_to: localhost

- name: set cloud-init metadata and userdata
  community.vmware.vmware_guest:
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: false
    cluster: '{{ vcenter_cluster }}'
    datacenter: '{{ vcenter_datacenter }}'
    folder: '/{{ vcenter_datacenter }}/vm/ansible_vms'
    name: '{{ vm_name }}'
    advanced_settings:
      - key: "guestinfo.metadata"
        value: '{{ vm_metadata | b64encode }}'
      - key: "guestinfo.metadata.encoding"
        value: "base64"
      - key: "guestinfo.userdata"
        value: '{{ vm_userdata | b64encode }}'
      - key: "guestinfo.userdata.encoding"
        value: "base64"
  delegate_to: localhost
  when: >
    "guestinfo.userdata" not in vm_info["instance"]["advanced_settings"] or
    "guestinfo.metadata" not in vm_info["instance"]["advanced_settings"]

- name: power-on and wait for ip address
  community.vmware.vmware_guest:
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: false
    cluster: '{{ vcenter_cluster }}'
    datacenter: '{{ vcenter_datacenter }}'
    folder: '/{{ vcenter_datacenter }}/vm/ansible_vms'
    name: '{{ vm_name }}'
    state: "powered-on"
    wait_for_ip_address: true
  delegate_to: localhost
  register: power_on

- name: wait 30 seconds
  ansible.builtin.pause:
    seconds: 30
  when: power_on is changed

- name: gather facts
  ansible.builtin.gather_facts:

- name: install required packages
  ansible.builtin.package:
    name:
      - git
      - python3-virtualenv
      - vim
      - wget
      - curl
      - man-db
      - jq
      - gpg
      - python3-packaging
      - tmux
    state: present
  become: true

- name: add hashicorp repo
  block:
    - name: hashicorp | install keyring
      ansible.builtin.get_url:
        url: https://apt.releases.hashicorp.com/gpg
        dest: /usr/share/keyrings/hashicorp-archive-keyring.asc
        force: true

    - name: hashicorp | add repo
      ansible.builtin.apt_repository:
        repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/hashicorp-archive-keyring.asc] https://apt.releases.hashicorp.com {{ ansible_distribution_release }} main"
        state: present

    - name: install packer and terraform
      ansible.builtin.package:
        name:
          - packer
          - terraform
        state: present
  become: true



- include_tasks: install-fly.yml
- include_tasks: install-helm.yml
- include_tasks: install-kubectl.yml

- name: check if homelab-automation repo exists
  ansible.builtin.stat:
    path: '{{ ansible_env.HOME }}/homelab-automation'
  register: homelab_automation_repo

- name: clone homelab-automation repo
  ansible.builtin.git:
    repo: https://github.com/samchelini/homelab-automation.git
    dest: "{{ ansible_env.HOME }}/homelab-automation"
  when: not homelab_automation_repo.stat.exists

- name: configure path
  ansible.builtin.lineinfile:
    insertbefore: BOF
    line: export PATH=$PATH:{{ ansible_env.HOME }}/homelab-automation/ansible/.venv/bin
    path: "{{ ansible_env.HOME }}/.bashrc"

- name: create ansible venv and install pip packages
  ansible.builtin.pip:
    virtualenv: "{{ ansible_env.HOME }}/homelab-automation/ansible/.venv"
    virtualenv_command: "virtualenv --prompt ansible-venv"
    name:
      - pip
      - ansible
      - ansible-core
      - requests
      - PyVmomi<9.0
      - passlib
      - jmespath
      - netaddr
      - distlib
    extra_args: --upgrade

- name: create kubespray venv and install pip packages
  ansible.builtin.pip:
    virtualenv: "{{ ansible_env.HOME }}/homelab-automation/ansible/.kubespray_venv"
    virtualenv_command: "virtualenv --prompt kubespray-venv"
    name:
      - pip
      - ansible-core<2.18.0
      - ansible
      - netaddr
      - jmespath
      - requests
      - PyVmomi<9.0
    extra_args: --upgrade

- name: configure .bashrc
  ansible.builtin.blockinfile:
    path: "{{ ansible_env.HOME }}/.bashrc"
    append_newline: true
    prepend_newline: true
    block: |
      export ANSIBLE_INVENTORY={{ ansible_env.HOME }}/homelab-automation/ansible/hosts
      export ANSIBLE_VAULT_PASSWORD_FILE={{ ansible_env.HOME }}/homelab-automation/ansible/vault-password-file
      export ANSIBLE_ROLES_PATH={{ ansible_env.HOME }}/homelab-automation/ansible/roles
      export ANSIBLE_PRIVATE_KEY_FILE={{ ansible_env.HOME }}/.ssh/ansible_ed25519
      export PATH=$PATH:{{ ansible_env.HOME }}/.genesis
      export GIT_AUTHOR_NAME="Samuel Chelini"
      export GIT_AUTHOR_EMAIL='samchelini@gmail.com'
      export GIT_COMMITTER_NAME="${GIT_AUTHOR_NAME}"
      export GIT_COMMITTER_EMAIL="${GIT_AUTHOR_EMAIL}"
      export GIT_EDITOR=vim
      source {{ ansible_env.HOME }}/homelab-automation/ansible/.venv/bin/activate
      alias ls='ls -lah --color=auto'

- name: configure .vimrc
  ansible.builtin.blockinfile:
    path: "{{ ansible_env.HOME }}/.vimrc"
    create: true
    marker: "\" {mark} ANSIBLE MANAGED BLOCK"
    block: |
      set tabstop=2
      set shiftwidth=2
      set expandtab
      set bg=dark
      syntax on

- name: copy ssh keypair to role files
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ ansible_env.HOME }}/homelab-automation/ansible/roles/bootstrap/files/"
    owner: ansible
    group: ansible
    mode: '0600'
  with_fileglob: "*ed25519*"

- name: copy ssh keypair to ansible home directory
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ ansible_env.HOME }}/.ssh/"
    owner: ansible
    group: ansible
    mode: '0600'
  with_fileglob: "*ed25519*"

- name: copy vault-password-file to role files
  ansible.builtin.copy:
    src: "vault-password-file"
    dest: "{{ ansible_env.HOME }}/homelab-automation/ansible/roles/bootstrap/files/vault-password-file"
    owner: ansible
    group: ansible
    mode: '0600'

- name: copy vault-password-file to ansible directory
  ansible.builtin.copy:
    src: "vault-password-file"
    dest: "{{ ansible_env.HOME }}/homelab-automation/ansible/"
    owner: ansible
    group: ansible
    mode: '0600'

- name: install sdorra.porkbun collection
  community.general.ansible_galaxy_install:
    type: collection
    name: sdorra.porkbun

- name: install lvps.389ds_server role
  community.general.ansible_galaxy_install:
    type: role
    name: lvps.389ds_server

- name: install kubespray collection
  community.general.ansible_galaxy_install:
    type: collection
    requirements_file: '{{ ansible_env.HOME }}/homelab-automation/ansible/roles/bootstrap/files/requirements.yml'
  changed_when: false
